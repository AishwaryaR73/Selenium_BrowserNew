directory: C:\Program Files\SmartBear\SoapUI-5.6.1\bin\.
command: cmd.exe /C testrunner.bat C:\Users\admin\Documents\APITesting-soapui-project.xml
SoapUI 5.6.1 TestCase Runner


https://en.wikipedia.org/api/rest_v1/page/summary/Pikachu

.) add in your SOAPUI
2.) Create Test Suite/TestCase/Add Get Request
3.) Validate
JSON path "Rhona Davidson"
Status Code: 200
ResponseTime: 1000msec


demoAR@99

-----------------------------------------------------

pm.test("Verify the status code", function () {
    pm.response.to.have.status(200);
});

pm.test("Verify the value", function () {
    pm.expect(pm.response.text()).to.include("QA");
    });
pm.test("Response time is less than 2000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(2000);
});
pm.test("Verify the job ", function () {
    var data = pm.response.json();
    pm.expect(data.job).to.eql("QA");
});







Run the collections from cmd
download newman
npm install -g newman
in postman tool export the collection and save the file extension is .json
cmd:---->newman run file name 

----->
to get report
cmd--->npm install newman-reporter-html
newman run GetUser.postman_collection.json -r html
in postman where file added the report gets generated

URL--->https://learning.postman.com/docs/running-collections/using-newman-cli/integration-with-jenkins/























SOAPUI / POSTMANAPI Testing
---------------------
1.) Create a POST request https://reqres.in/api/register
2.) Method: POST
3.) Configure Request Body{
"email": "sydney@fife"
}
4.)
----------------------------
Validation Step:StatusCode
ResponseTime 1000msec
JSON path
error message
Value in responseBody
5.) Execute Test using Newman npm install -g newman
npm install -g newman-reporter-html
6.) Verify and HTML report get generated-----------------------------
optional:
Jenkins
7.) Integrate with Jenkins and trigger manually/build now
remotly
git check-In
build chaining -






















[1:01 PM] Aarav Singh
Selenium Excercise1
--------------------------
AppLication URL:
	https://computer-database.gatling.io/computers
=====================================================
Verify the title as Computers database
Verify the page header is the same as the page title
User must see the filter by computer name text box
User able to see add a new computer button
User able to see the filter by name button
User able to see the table and the headers as follows
Computer name
Introduced
Discontinued
Company
The user should see the pagination
Add a new computerClick on create this computer
User should see the red background on the computer name field
Enter the computer name
Select the company as Nokia
Submit the form
Successful message should be displayed
Search the created data=======================================================
Computers database

[1:01 PM] Aarav Singh

Selenium Excercise2
-------------
Application URL
https://www.saucedemo.com/
-----------------------------------
Verify the title as Swag Labs-----------done
Verify the login button text is capitalized
Login with standard_user & secret_sauce--done
Verify default filter dropdown is A-Z --done
Add the first product to the cart
Verify the cart badge has 1 product
Add the last product to the cart
Verify the cart badge value is increased
Remove the first product from the cart
Verify the cart badge has 1 product
Click on the cart ðŸ›’
Verify the added product is available
Click on the continue shopping
Change the price filter from low to high
Verify the price sorted properly
Swag Labs
Sauce Labs Swag Labs app

----------------------------------------------------------------
[5:02 PM] Aarav Singh
Reference URL:https://www.npmjs.com/package/json-server
===================================================Prerequisite Node.js should be installed on the system
Step 1 : Install json-serverhttps://www.npmjs.com/package/json-server 
  run on command prompt:--->
	npm install -g json-serverStep 
2 : Run json-server
	json-server --watch db.json
Step 3 : Create dummy api data
Step 4 : Invoke json-server url on browser and check the api----------------------------
verify:
C:\Users\Act\db.jsonhttp://localhost:3000/subjects===================================================POM.xml---------------------------------------------------<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
<modelVersion>4.0.0</modelVersion> <groupId>RestassuredAPITesting_Employee_Project</groupId>
<artifactId>RestassuredAPITesting_Employee_Project</artifactId>
<version>0.0.1-SNAPSHOT</version>
<packaging>jar</packaging> <name>RestassuredAPITesting_Employee_Project</name>
<url>http://maven.apache.org <properties>
<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
</properties> <build>
<plugins> <plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-compiler-plugin</artifactId>
<configuration>
<source>1.8</source>
<target>1.8</target>
</configuration>
</plugin> <plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-surefire-plugin</artifactId>
<version>2.18.1</version>
<configuration>
<suiteXmlFiles>
<suiteXmlFile>testng.xml</suiteXmlFile>
</suiteXmlFiles>
</configuration>
</plugin> </plugins> </build>
<dependencies> <!-- https://mvnrepository.com/artifact/io.rest-assured/rest-assured -->
<dependency>
<groupId>io.rest-assured</groupId>
<artifactId>rest-assured</artifactId>
<version>3.1.0</version>
<scope>test</scope>
</dependency> <!-- https://mvnrepository.com/artifact/org.testng/testng -->
<dependency>
<groupId>org.testng</groupId>
<artifactId>testng</artifactId>
<version>6.14.3</version>
<scope>test</scope>
</dependency> <!-- https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple -->
<dependency>
<groupId>com.googlecode.json-simple</groupId>
<artifactId>json-simple</artifactId>
<version>1.1.1</version>
</dependency> <dependency>
<groupId>org.apache.poi</groupId>
<artifactId>poi</artifactId>
<version>3.17</version>
</dependency> <dependency>
<groupId>org.apache.poi</groupId>
<artifactId>poi-ooxml</artifactId>
<version>3.17</version>
</dependency> <dependency>
<groupId>com.aventstack</groupId>
<artifactId>extentreports</artifactId>
<version>4.0.9</version>
</dependency>
<dependency>
<groupId>log4j</groupId>
<artifactId>log4j</artifactId>
<version>1.2.17</version>
</dependency> </dependencies>
</project>
npm: json-server
Get a full fake REST API with zero coding in less than 30 seconds



-----------------------------Rest Assure----------
[4:27 PM] Aarav Singh
package restAPIExampleDemo;
import org.json.simple.JSONObject;
import org.testng.Assert;
import org.testng.annotations.*;import io.restassured.RestAssured;
import io.restassured.http.Method;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;public class TC003_Post_Employee_Record { RequestSpecification httpRequest;
Response response;
String empName="Priya";
String empSalary="100000";
String empAge="27";
@BeforeClass
void createEmployee() throws InterruptedException
{
RestAssured.baseURI = "http://dummy.restapiexample.com/api/v1";
httpRequest = RestAssured.given();
JSONObject requestParams = new JSONObject();
requestParams.put("name", empName); // Cast
requestParams.put("salary", empSalary);
requestParams.put("age", empAge);
// Add a header stating the Request body is a JSON
httpRequest.header("Content-Type", "application/json"); // Add the Json to the body of the request
httpRequest.body(requestParams.toJSONString());
response = httpRequest.request(Method.POST, "/create");
Thread.sleep(5000); }
@Test
void checkStatusCode()
{
int statusCode = response.getStatusCode();
Assert.assertEquals(statusCode, 200);
}
@AfterClass
void tearDown()
{
System.out.println("Scripts Executed successfully");
}}

